/*
 * Account Information API
 * In this document, you'll find the steps your organization needs to take to use our API services. Included in this guide are details of request and response messages used to support your organization’s integration. The intended audience for this document are **Technical Architects**, **Development Engineers**, **Test Engineers**, and **Operation & Maintenance Engineers** involved in development and support of your organization’s integration. Setting up our API Services is best completed with the assistance of your organization’s IT team, or someone with experience and knowledge of application programming interfaces. This should include experience with **JSON payloads**, **security** and **public key infrastructure (PKI)**. This Document describes the following request and response structure of HSBCnet - Account Information API. For detail implementation guidelines, please refer to the respective section from [develop.hsbc.com](https://develop.hsbc.com/ob-api-documentation/account-information-uk-personal-v319) 
 *
 * The version of the OpenAPI document: 3.1.11
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OBReadTransaction6;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TransactionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByAccountIdCall(String accountId, String xFapiAuthDate, String xFapiCustomerIpAddress, String xFapiInteractionId, String xCustomerUserAgent, OffsetDateTime fromBookingDateTime, OffsetDateTime toBookingDateTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{AccountId}/transactions"
            .replace("{" + "AccountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromBookingDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromBookingDateTime", fromBookingDateTime));
        }

        if (toBookingDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toBookingDateTime", toBookingDateTime));
        }

        if (xFapiAuthDate != null) {
            localVarHeaderParams.put("x-fapi-auth-date", localVarApiClient.parameterToString(xFapiAuthDate));
        }

        if (xFapiCustomerIpAddress != null) {
            localVarHeaderParams.put("x-fapi-customer-ip-address", localVarApiClient.parameterToString(xFapiCustomerIpAddress));
        }

        if (xFapiInteractionId != null) {
            localVarHeaderParams.put("x-fapi-interaction-id", localVarApiClient.parameterToString(xFapiInteractionId));
        }

        if (xCustomerUserAgent != null) {
            localVarHeaderParams.put("x-customer-user-agent", localVarApiClient.parameterToString(xCustomerUserAgent));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json; charset=utf-8",
            "application/jose+jwe"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth", "PSUOAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByAccountIdValidateBeforeCall(String accountId, String xFapiAuthDate, String xFapiCustomerIpAddress, String xFapiInteractionId, String xCustomerUserAgent, OffsetDateTime fromBookingDateTime, OffsetDateTime toBookingDateTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getByAccountId(Async)");
        }

        return getByAccountIdCall(accountId, xFapiAuthDate, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, fromBookingDateTime, toBookingDateTime, _callback);

    }


    private ApiResponse<OBReadTransaction6> getByAccountIdWithHttpInfo(String accountId, String xFapiAuthDate, String xFapiCustomerIpAddress, String xFapiInteractionId, String xCustomerUserAgent, OffsetDateTime fromBookingDateTime, OffsetDateTime toBookingDateTime) throws ApiException {
        okhttp3.Call localVarCall = getByAccountIdValidateBeforeCall(accountId, xFapiAuthDate, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, fromBookingDateTime, toBookingDateTime, null);
        Type localVarReturnType = new TypeToken<OBReadTransaction6>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByAccountIdAsync(String accountId, String xFapiAuthDate, String xFapiCustomerIpAddress, String xFapiInteractionId, String xCustomerUserAgent, OffsetDateTime fromBookingDateTime, OffsetDateTime toBookingDateTime, final ApiCallback<OBReadTransaction6> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByAccountIdValidateBeforeCall(accountId, xFapiAuthDate, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, fromBookingDateTime, toBookingDateTime, _callback);
        Type localVarReturnType = new TypeToken<OBReadTransaction6>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByAccountIdRequestBuilder {
        private final String accountId;
        private String xFapiAuthDate;
        private String xFapiCustomerIpAddress;
        private String xFapiInteractionId;
        private String xCustomerUserAgent;
        private OffsetDateTime fromBookingDateTime;
        private OffsetDateTime toBookingDateTime;

        private GetByAccountIdRequestBuilder(String accountId) {
            this.accountId = accountId;
        }

        /**
         * Set xFapiAuthDate
         * @param xFapiAuthDate The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC (optional)
         * @return GetByAccountIdRequestBuilder
         */
        public GetByAccountIdRequestBuilder xFapiAuthDate(String xFapiAuthDate) {
            this.xFapiAuthDate = xFapiAuthDate;
            return this;
        }
        
        /**
         * Set xFapiCustomerIpAddress
         * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
         * @return GetByAccountIdRequestBuilder
         */
        public GetByAccountIdRequestBuilder xFapiCustomerIpAddress(String xFapiCustomerIpAddress) {
            this.xFapiCustomerIpAddress = xFapiCustomerIpAddress;
            return this;
        }
        
        /**
         * Set xFapiInteractionId
         * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
         * @return GetByAccountIdRequestBuilder
         */
        public GetByAccountIdRequestBuilder xFapiInteractionId(String xFapiInteractionId) {
            this.xFapiInteractionId = xFapiInteractionId;
            return this;
        }
        
        /**
         * Set xCustomerUserAgent
         * @param xCustomerUserAgent Indicates the user-agent that the PSU is using. (optional)
         * @return GetByAccountIdRequestBuilder
         */
        public GetByAccountIdRequestBuilder xCustomerUserAgent(String xCustomerUserAgent) {
            this.xCustomerUserAgent = xCustomerUserAgent;
            return this;
        }
        
        /**
         * Set fromBookingDateTime
         * @param fromBookingDateTime The UTC ISO 8601 Date Time to filter transactions FROM NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the ASPSP must ignore the timezone component. (optional)
         * @return GetByAccountIdRequestBuilder
         */
        public GetByAccountIdRequestBuilder fromBookingDateTime(OffsetDateTime fromBookingDateTime) {
            this.fromBookingDateTime = fromBookingDateTime;
            return this;
        }
        
        /**
         * Set toBookingDateTime
         * @param toBookingDateTime The UTC ISO 8601 Date Time to filter transactions TO NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the ASPSP must ignore the timezone component. (optional)
         * @return GetByAccountIdRequestBuilder
         */
        public GetByAccountIdRequestBuilder toBookingDateTime(OffsetDateTime toBookingDateTime) {
            this.toBookingDateTime = toBookingDateTime;
            return this;
        }
        
        /**
         * Build call for getByAccountId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
            <tr><td> 405 </td><td> Method Not Allowed </td><td>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * Retry-After - Number in seconds to wait <br>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByAccountIdCall(accountId, xFapiAuthDate, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, fromBookingDateTime, toBookingDateTime, _callback);
        }


        /**
         * Execute getByAccountId request
         * @return OBReadTransaction6
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
            <tr><td> 405 </td><td> Method Not Allowed </td><td>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * Retry-After - Number in seconds to wait <br>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
         </table>
         */
        public OBReadTransaction6 execute() throws ApiException {
            ApiResponse<OBReadTransaction6> localVarResp = getByAccountIdWithHttpInfo(accountId, xFapiAuthDate, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, fromBookingDateTime, toBookingDateTime);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByAccountId request with HTTP info returned
         * @return ApiResponse&lt;OBReadTransaction6&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
            <tr><td> 405 </td><td> Method Not Allowed </td><td>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * Retry-After - Number in seconds to wait <br>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
         </table>
         */
        public ApiResponse<OBReadTransaction6> executeWithHttpInfo() throws ApiException {
            return getByAccountIdWithHttpInfo(accountId, xFapiAuthDate, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, fromBookingDateTime, toBookingDateTime);
        }

        /**
         * Execute getByAccountId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
            <tr><td> 405 </td><td> Method Not Allowed </td><td>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * Retry-After - Number in seconds to wait <br>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OBReadTransaction6> _callback) throws ApiException {
            return getByAccountIdAsync(accountId, xFapiAuthDate, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, fromBookingDateTime, toBookingDateTime, _callback);
        }
    }

    /**
     * Get Account Transactions
     * This endpoint enables to get account Transactions by AccountId. Supports all product types -Personal Current Account, Savings Account, Credit Cards, Foreign Currency Accounts, Global Money, Working Capital
     * @param accountId AccountId (required)
     * @return GetByAccountIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Retry-After - Number in seconds to wait <br>  * x-fapi-interaction-id - An RFC4122 UID used as a correlation id. <br>  </td></tr>
     </table>
     */
    public GetByAccountIdRequestBuilder getByAccountId(String accountId) throws IllegalArgumentException {
        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new GetByAccountIdRequestBuilder(accountId);
    }
}
